The script fsm_tests.py validates and implements dns blocking policies to a targeted pod.
The policies are implemented in the policies.conf file.
The policies.conf file structure is described at the beginning of the file.
The basic idea is to implement sets of generic policies and attach devices to these policies.

The policies.conf file as shipped implements two policies:
- A whitelist policy allowing devices in the parents group
  to access sites otherwise category blocked
- A policy blocking websites based on their categorization

- Devices can be organized by tags. Tags can be organized by tag groups.
- Policies list the targetd devices thtough their 'macs' field.
  An entry in the 'macs' can be either
  - A mac address sush as xx:xx:xx:xx:xx:xx
  - A tag (set of mac addresses) \${tag_name}, such \${parents} or \${kids}
  - A tag group (set of tags) such as \$[the_family]

Script Execution:
-----------------
./fsm_tests.py [--pod <ip addr>] [--log-level DEBUG] [--help]

The script reads policies.conf, does some policy format validation, and remote executes
the implementation of the policies on the targeted pod.
Without the '--pod' option, the script tries to connect to a pod at the 92.168.40.1 address.

pod remote access prerequisites:
--------------------------------
- The target pod is ssh accessible through key identification.
- The host running the program has a running forward agent
- The forward agent is currently managing th private key

The script does its best to ensure a flawless access to the pod and
fix potential ssh credentials issues.

In the event that the script cannot connect to the pod, please follow these instructions:
- add an entry to you ~/.ssh/config for the pod, with the private key to use,
  and indicating addition to the forward agent [MACOSX]
- remove the pod entry from desktop's user ~/.ssh/known_hosts file
- ssh root@<pod's ip address>.
  You should be asked to confirm adding pod in the known hosts.
  You may be asked to type the key passphrase if it was not yet managed by the forward agent
- exit the ssh session, ssh again. You should be logged without any further intervention.
The script should now be able to access the pod without error.