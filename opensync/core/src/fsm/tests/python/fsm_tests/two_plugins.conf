# Declare tap interfaces config entries
[tap_interfaces]
tap_foo =
tap_bar =

# Instantiate tap interfaces
[tap_foo]
of_port = 1001
if_name = br-home.foo
bridge = br-home

[tap_bar]
of_port = 1002
if_name = br-home.bar
bridge = br-home


# Declare openflow config entries
[openflow_config]
flow_foo =
flow_bar =

# Instantiate openflow entries
[flow_foo]
priority = 200
table = 0
bridge = br-home
rule = dl_src=\${dev_tag_foo},udp,tp_dst=12345
action = normal,output:1001
token = dev_flow_foo

[flow_bar]
priority = 250
table = 0
bridge = br-home
rule = dl_src=\${dev_tag_bar},tcp,tp_dst=54321
action = normal,output:1002
token = dev_flow_bar


# Declare tag entries
[openflow_tags]
tag_bar =
tag_foo =

# Instantiate tag entries
[tag_foo]
device_value = []
name = dev_tag_foo
cloud_value = ['aa:bb:cc:dd:ee:ff', '11:22:33:44:55:66']

[tag_bar]
device_value = ['de:ad:be:ef:00:11', '66:55:44:33:22:11']
name = dev_tag_bar
cloud_value = []


# Declare plugin entries
[fsm_plugins]
plugin_test_foo =
plugin_test_bar =

# Instantiate plugin entries
[plugin_test_foo]
plugin = /tmp/libfsm_foo.so
handler = dev_foo
other_config = {'mqtt_v': 'foo_mqtt_v', 'dso_init': 'fsm_foo_init'}
pkt_capt_filter = udp port 12345
if_name = br-home.foo

[plugin_test_bar]
plugin = /tmp/libfsm_bar.so
handler = dev_bar
other_config = {'mqtt_v': 'bar_mqtt_v', 'dso_init': 'fsm_bar_init'}
pkt_capt_filter = tcp port 54321
if_name = br-home.bar


