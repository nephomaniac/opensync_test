/*
Copyright (c) 2015, Plume Design Inc. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the Plume Design Inc. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ip_dns_telemetry.proto */

#ifndef PROTOBUF_C_ip_5fdns_5ftelemetry_2eproto__INCLUDED
#define PROTOBUF_C_ip_5fdns_5ftelemetry_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Wc__Stats__WCHealthStats Wc__Stats__WCHealthStats;
typedef struct _Wc__Stats__WCRiskStats Wc__Stats__WCRiskStats;
typedef struct _Wc__Stats__WCCategoryStats Wc__Stats__WCCategoryStats;
typedef struct _Wc__Stats__WCRuleStats Wc__Stats__WCRuleStats;
typedef struct _Wc__Stats__WCHeroStats Wc__Stats__WCHeroStats;
typedef struct _Wc__Stats__ObservationPoint Wc__Stats__ObservationPoint;
typedef struct _Wc__Stats__ObservationWindow Wc__Stats__ObservationWindow;
typedef struct _Wc__Stats__WCStatsReport Wc__Stats__WCStatsReport;


/* --- enums --- */


/* --- messages --- */

struct  _Wc__Stats__WCHealthStats
{
  ProtobufCMessage base;
  /*
   * total number of lookups requested against the
   * WebClassification plugin/module on device
   */
  protobuf_c_boolean has_totallookups;
  uint32_t totallookups;
  /*
   * the WC plugin first looks into local cache -
   * cacheHits is the number of lookups that got resolved from local cache
   */
  protobuf_c_boolean has_cachehits;
  uint32_t cachehits;
  /*
   * when the fqdn is not found in local cache - the plugin does a
   * remote internet call against Web Classification service
   * remoteLookups is total number of such remote internet calls made
   */
  protobuf_c_boolean has_remotelookups;
  uint32_t remotelookups;
  /*
   * the plugin may fail to connect to the remote internet Web Classification
   * service - connectivityFailures counts number of such
   * connectivity failures
   */
  protobuf_c_boolean has_connectivityfailures;
  uint32_t connectivityfailures;
  /*
   * the plugin may successfully connect to the IP of the Web Classification
   * service - but the service may choke and return invalid response e.g.
   * invalid license key or server failure of some sort
   */
  protobuf_c_boolean has_servicefailures;
  uint32_t servicefailures;
  /*
   * uncategorized is how many FQDNs could not be classified/categorized
   * by the Web Classification service
   */
  protobuf_c_boolean has_uncategorized;
  uint32_t uncategorized;
  /*
   * Min latency in milliseconds by the Web Classification service
   */
  protobuf_c_boolean has_minlatency;
  uint32_t minlatency;
  /*
   * Max latency in milliseconds by the Web Classification service
   */
  protobuf_c_boolean has_maxlatency;
  uint32_t maxlatency;
  /*
   * Average latency in milliseconds by the Web Classification service
   */
  protobuf_c_boolean has_averagelatency;
  uint32_t averagelatency;
  /*
   * number of locally cached entries
   */
  protobuf_c_boolean has_cachedentries;
  uint32_t cachedentries;
  /*
   * total cache size in number of allocated entries
   */
  protobuf_c_boolean has_cachesize;
  uint32_t cachesize;
};
#define WC__STATS__WCHEALTH_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wc__stats__wchealth_stats__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Hero metrics
 */
struct  _Wc__Stats__WCRiskStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_risk;
  int32_t risk;
  protobuf_c_boolean has_totalhits;
  uint32_t totalhits;
};
#define WC__STATS__WCRISK_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wc__stats__wcrisk_stats__descriptor) \
    , 0, 0, 0, 0 }


struct  _Wc__Stats__WCCategoryStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_categoryid;
  int32_t categoryid;
  size_t n_wcriskstats;
  Wc__Stats__WCRiskStats **wcriskstats;
};
#define WC__STATS__WCCATEGORY_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wc__stats__wccategory_stats__descriptor) \
    , 0, 0, 0,NULL }


struct  _Wc__Stats__WCRuleStats
{
  ProtobufCMessage base;
  char *policyname;
  /*
   * "kids:d:", "kids", "spamPhishMalware-ip:d",
   * can be empty if no rules hit
   */
  char *rulename;
  size_t n_wccategorystats;
  Wc__Stats__WCCategoryStats **wccategorystats;
};
#define WC__STATS__WCRULE_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wc__stats__wcrule_stats__descriptor) \
    , NULL, NULL, 0,NULL }


struct  _Wc__Stats__WCHeroStats
{
  ProtobufCMessage base;
  /*
   * source mac format as "5e:00:74:59:79:00"
   */
  char *srcmac;
  size_t n_wcrulestats;
  Wc__Stats__WCRuleStats **wcrulestats;
};
#define WC__STATS__WCHERO_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wc__stats__wchero_stats__descriptor) \
    , NULL, 0,NULL }


struct  _Wc__Stats__ObservationPoint
{
  ProtobufCMessage base;
  char *nodeid;
  char *locationid;
};
#define WC__STATS__OBSERVATION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wc__stats__observation_point__descriptor) \
    , NULL, NULL }


struct  _Wc__Stats__ObservationWindow
{
  ProtobufCMessage base;
  protobuf_c_boolean has_startedat;
  uint64_t startedat;
  protobuf_c_boolean has_endedat;
  uint64_t endedat;
};
#define WC__STATS__OBSERVATION_WINDOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wc__stats__observation_window__descriptor) \
    , 0, 0, 0, 0 }


struct  _Wc__Stats__WCStatsReport
{
  ProtobufCMessage base;
  /*
   * must be "webpulse" || "brightcloud"
   */
  char *wcprovider;
  Wc__Stats__ObservationPoint *observationpoint;
  Wc__Stats__ObservationWindow *observationwindow;
  Wc__Stats__WCHealthStats *wchealthstats;
  size_t n_wcherostats;
  Wc__Stats__WCHeroStats **wcherostats;
};
#define WC__STATS__WCSTATS_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wc__stats__wcstats_report__descriptor) \
    , NULL, NULL, NULL, NULL, 0,NULL }


/* Wc__Stats__WCHealthStats methods */
void   wc__stats__wchealth_stats__init
                     (Wc__Stats__WCHealthStats         *message);
size_t wc__stats__wchealth_stats__get_packed_size
                     (const Wc__Stats__WCHealthStats   *message);
size_t wc__stats__wchealth_stats__pack
                     (const Wc__Stats__WCHealthStats   *message,
                      uint8_t             *out);
size_t wc__stats__wchealth_stats__pack_to_buffer
                     (const Wc__Stats__WCHealthStats   *message,
                      ProtobufCBuffer     *buffer);
Wc__Stats__WCHealthStats *
       wc__stats__wchealth_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wc__stats__wchealth_stats__free_unpacked
                     (Wc__Stats__WCHealthStats *message,
                      ProtobufCAllocator *allocator);
/* Wc__Stats__WCRiskStats methods */
void   wc__stats__wcrisk_stats__init
                     (Wc__Stats__WCRiskStats         *message);
size_t wc__stats__wcrisk_stats__get_packed_size
                     (const Wc__Stats__WCRiskStats   *message);
size_t wc__stats__wcrisk_stats__pack
                     (const Wc__Stats__WCRiskStats   *message,
                      uint8_t             *out);
size_t wc__stats__wcrisk_stats__pack_to_buffer
                     (const Wc__Stats__WCRiskStats   *message,
                      ProtobufCBuffer     *buffer);
Wc__Stats__WCRiskStats *
       wc__stats__wcrisk_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wc__stats__wcrisk_stats__free_unpacked
                     (Wc__Stats__WCRiskStats *message,
                      ProtobufCAllocator *allocator);
/* Wc__Stats__WCCategoryStats methods */
void   wc__stats__wccategory_stats__init
                     (Wc__Stats__WCCategoryStats         *message);
size_t wc__stats__wccategory_stats__get_packed_size
                     (const Wc__Stats__WCCategoryStats   *message);
size_t wc__stats__wccategory_stats__pack
                     (const Wc__Stats__WCCategoryStats   *message,
                      uint8_t             *out);
size_t wc__stats__wccategory_stats__pack_to_buffer
                     (const Wc__Stats__WCCategoryStats   *message,
                      ProtobufCBuffer     *buffer);
Wc__Stats__WCCategoryStats *
       wc__stats__wccategory_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wc__stats__wccategory_stats__free_unpacked
                     (Wc__Stats__WCCategoryStats *message,
                      ProtobufCAllocator *allocator);
/* Wc__Stats__WCRuleStats methods */
void   wc__stats__wcrule_stats__init
                     (Wc__Stats__WCRuleStats         *message);
size_t wc__stats__wcrule_stats__get_packed_size
                     (const Wc__Stats__WCRuleStats   *message);
size_t wc__stats__wcrule_stats__pack
                     (const Wc__Stats__WCRuleStats   *message,
                      uint8_t             *out);
size_t wc__stats__wcrule_stats__pack_to_buffer
                     (const Wc__Stats__WCRuleStats   *message,
                      ProtobufCBuffer     *buffer);
Wc__Stats__WCRuleStats *
       wc__stats__wcrule_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wc__stats__wcrule_stats__free_unpacked
                     (Wc__Stats__WCRuleStats *message,
                      ProtobufCAllocator *allocator);
/* Wc__Stats__WCHeroStats methods */
void   wc__stats__wchero_stats__init
                     (Wc__Stats__WCHeroStats         *message);
size_t wc__stats__wchero_stats__get_packed_size
                     (const Wc__Stats__WCHeroStats   *message);
size_t wc__stats__wchero_stats__pack
                     (const Wc__Stats__WCHeroStats   *message,
                      uint8_t             *out);
size_t wc__stats__wchero_stats__pack_to_buffer
                     (const Wc__Stats__WCHeroStats   *message,
                      ProtobufCBuffer     *buffer);
Wc__Stats__WCHeroStats *
       wc__stats__wchero_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wc__stats__wchero_stats__free_unpacked
                     (Wc__Stats__WCHeroStats *message,
                      ProtobufCAllocator *allocator);
/* Wc__Stats__ObservationPoint methods */
void   wc__stats__observation_point__init
                     (Wc__Stats__ObservationPoint         *message);
size_t wc__stats__observation_point__get_packed_size
                     (const Wc__Stats__ObservationPoint   *message);
size_t wc__stats__observation_point__pack
                     (const Wc__Stats__ObservationPoint   *message,
                      uint8_t             *out);
size_t wc__stats__observation_point__pack_to_buffer
                     (const Wc__Stats__ObservationPoint   *message,
                      ProtobufCBuffer     *buffer);
Wc__Stats__ObservationPoint *
       wc__stats__observation_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wc__stats__observation_point__free_unpacked
                     (Wc__Stats__ObservationPoint *message,
                      ProtobufCAllocator *allocator);
/* Wc__Stats__ObservationWindow methods */
void   wc__stats__observation_window__init
                     (Wc__Stats__ObservationWindow         *message);
size_t wc__stats__observation_window__get_packed_size
                     (const Wc__Stats__ObservationWindow   *message);
size_t wc__stats__observation_window__pack
                     (const Wc__Stats__ObservationWindow   *message,
                      uint8_t             *out);
size_t wc__stats__observation_window__pack_to_buffer
                     (const Wc__Stats__ObservationWindow   *message,
                      ProtobufCBuffer     *buffer);
Wc__Stats__ObservationWindow *
       wc__stats__observation_window__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wc__stats__observation_window__free_unpacked
                     (Wc__Stats__ObservationWindow *message,
                      ProtobufCAllocator *allocator);
/* Wc__Stats__WCStatsReport methods */
void   wc__stats__wcstats_report__init
                     (Wc__Stats__WCStatsReport         *message);
size_t wc__stats__wcstats_report__get_packed_size
                     (const Wc__Stats__WCStatsReport   *message);
size_t wc__stats__wcstats_report__pack
                     (const Wc__Stats__WCStatsReport   *message,
                      uint8_t             *out);
size_t wc__stats__wcstats_report__pack_to_buffer
                     (const Wc__Stats__WCStatsReport   *message,
                      ProtobufCBuffer     *buffer);
Wc__Stats__WCStatsReport *
       wc__stats__wcstats_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wc__stats__wcstats_report__free_unpacked
                     (Wc__Stats__WCStatsReport *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Wc__Stats__WCHealthStats_Closure)
                 (const Wc__Stats__WCHealthStats *message,
                  void *closure_data);
typedef void (*Wc__Stats__WCRiskStats_Closure)
                 (const Wc__Stats__WCRiskStats *message,
                  void *closure_data);
typedef void (*Wc__Stats__WCCategoryStats_Closure)
                 (const Wc__Stats__WCCategoryStats *message,
                  void *closure_data);
typedef void (*Wc__Stats__WCRuleStats_Closure)
                 (const Wc__Stats__WCRuleStats *message,
                  void *closure_data);
typedef void (*Wc__Stats__WCHeroStats_Closure)
                 (const Wc__Stats__WCHeroStats *message,
                  void *closure_data);
typedef void (*Wc__Stats__ObservationPoint_Closure)
                 (const Wc__Stats__ObservationPoint *message,
                  void *closure_data);
typedef void (*Wc__Stats__ObservationWindow_Closure)
                 (const Wc__Stats__ObservationWindow *message,
                  void *closure_data);
typedef void (*Wc__Stats__WCStatsReport_Closure)
                 (const Wc__Stats__WCStatsReport *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor wc__stats__wchealth_stats__descriptor;
extern const ProtobufCMessageDescriptor wc__stats__wcrisk_stats__descriptor;
extern const ProtobufCMessageDescriptor wc__stats__wccategory_stats__descriptor;
extern const ProtobufCMessageDescriptor wc__stats__wcrule_stats__descriptor;
extern const ProtobufCMessageDescriptor wc__stats__wchero_stats__descriptor;
extern const ProtobufCMessageDescriptor wc__stats__observation_point__descriptor;
extern const ProtobufCMessageDescriptor wc__stats__observation_window__descriptor;
extern const ProtobufCMessageDescriptor wc__stats__wcstats_report__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ip_5fdns_5ftelemetry_2eproto__INCLUDED */
