// Copyright (c) 2015, Plume Design Inc. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//    1. Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//    3. Neither the name of the Plume Design Inc. nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Plume Design Inc. BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto2";

// WebClassification Stats
package wc.stats;

message WCHealthStats {

    // total number of lookups requested against the
    // WebClassification plugin/module on device
    optional uint32 totalLookups                       = 1;

    // the WC plugin first looks into local cache -
    // cacheHits is the number of lookups that got resolved from local cache
    optional uint32 cacheHits                          = 2;

    // when the fqdn is not found in local cache - the plugin does a
    // remote internet call against Web Classification service
    // remoteLookups is total number of such remote internet calls made
    optional uint32 remoteLookups                      = 3;

    // the plugin may fail to connect to the remote internet Web Classification
    // service - connectivityFailures counts number of such
    // connectivity failures
    optional uint32 connectivityFailures               = 4;


    // the plugin may successfully connect to the IP of the Web Classification
    // service - but the service may choke and return invalid response e.g.
    // invalid license key or server failure of some sort
    optional uint32 serviceFailures                    = 5;

    // uncategorized is how many FQDNs could not be classified/categorized
    // by the Web Classification service
    optional uint32 uncategorized                      = 6;

    // Min latency in milliseconds by the Web Classification service
    optional uint32 minLatency                         = 7;

    // Max latency in milliseconds by the Web Classification service
    optional uint32 maxLatency                         = 8;

    // Average latency in milliseconds by the Web Classification service
    optional uint32 averageLatency                     = 9;


    // number of locally cached entries
    optional uint32 cachedEntries                      = 10;


    // total cache size in number of allocated entries
    optional uint32 cacheSize                          = 11;
}


// Hero metrics
message WCRiskStats {
     optional int32  risk                              = 1;
     optional uint32 totalHits                         = 2;
}


message WCCategoryStats {
     optional int32           categoryId               = 1;
     repeated WCRiskStats     wcRiskStats              = 2;
}


message WCRuleStats {
    optional string policyName                         = 1;

    // "kids:d:", "kids", "spamPhishMalware-ip:d",
    // can be empty if no rules hit
    optional string ruleName                           = 2;
    repeated WCCategoryStats wcCategoryStats           = 3;
}


message WCHeroStats {
     // source mac format as "5e:00:74:59:79:00"
    required string srcMac                             = 1;
    repeated WCRuleStats wcRuleStats                   = 2;
}


message ObservationPoint {
     optional string nodeId                            = 1;
     optional string locationId                        = 2;
}


message ObservationWindow {
     optional uint64    startedAt                      = 1;
     optional uint64    endedAt                        = 2;
}


message WCStatsReport {
     // must be "webpulse" || "brightcloud"
     optional string wcProvider                        = 1;
     optional ObservationPoint  observationPoint       = 2;
     optional ObservationWindow observationWindow      = 3;
     optional WCHealthStats wcHealthStats              = 4;
     repeated WCHeroStats   wcHeroStats                = 5;
}
